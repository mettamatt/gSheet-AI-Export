/**
 * Adds a custom menu to the Google Sheets UI upon opening the spreadsheet.
 * The menu contains an option to export the spreadsheet data and formulas as JSON.
 */
function onOpen() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const menuEntries = [{ name: "Export for AI (JSON)", functionName: "saveAsJson" }];
  ss.addMenu("Export Tools", menuEntries);
}

/**
 * Exports the entire spreadsheet's data and formulas into a downloadable JSON file.
 * The JSON includes detailed metadata, explanations, and context to facilitate AI analysis.
 */
function saveAsJson() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheets = ss.getSheets();

  // Initialize the main JSON object with metadata and explanation
  let spreadsheetData = {
    explanation: "This JSON file was generated by converting a Google Sheet. It contains all data and formulas from the spreadsheet, along with comprehensive metadata.",
    spreadsheet_metadata: {
      spreadsheet_name: ss.getName(),
      export_timestamp: new Date().toISOString(),
      total_sheets: sheets.length,
      total_rows: 0,
      total_columns: 0,
      total_cells: 0,
      total_formulas: 0
    },
    sheets: []
  };

  // Iterate through each sheet to gather data, formulas, and metadata
  sheets.forEach(sheet => {
    const sheetName = sheet.getName();
    const sheetId = sheet.getSheetId();
    const dataRange = sheet.getDataRange();
    const numRows = dataRange.getNumRows();
    const numColumns = dataRange.getNumColumns();
    const values = dataRange.getValues();
    const formulas = dataRange.getFormulas();

    // Count the number of formulas in the sheet
    let formulaCount = 0;
    formulas.forEach(row => {
      row.forEach(cell => {
        if (cell && cell.trim() !== "") {
          formulaCount++;
        }
      });
    });

    // Update overall spreadsheet metadata
    spreadsheetData.spreadsheet_metadata.total_rows += numRows;
    spreadsheetData.spreadsheet_metadata.total_columns += numColumns;
    spreadsheetData.spreadsheet_metadata.total_cells += numRows * numColumns;
    spreadsheetData.spreadsheet_metadata.total_formulas += formulaCount;

    // Construct the cells array
    let cells = [];
    for (let rowIndex = 0; rowIndex < numRows; rowIndex++) {
      for (let colIndex = 0; colIndex < numColumns; colIndex++) {
        let row = rowIndex + 1;
        let col = colIndex + 1;
        let cell = sheet.getRange(row, col);
        let cellAddress = cell.getA1Notation();
        let value = values[rowIndex][colIndex];
        let formula = formulas[rowIndex][colIndex];

        cells.push({
          cell_address: cellAddress,
          value: value,
          formula: formula ? formula : null
        });
      }
    }

    // Construct sheet-specific data and metadata
    let sheetData = {
      sheet_name: sheetName,
      sheet_id: sheetId,
      sheet_index: sheet.getIndex(),
      sheet_metadata: {
        num_rows: numRows,
        num_columns: numColumns,
        num_cells: numRows * numColumns,
        num_formulas: formulaCount,
        protected: sheet.isSheetHidden() ? "Hidden" : "Visible"
      },
      cells: cells
    };

    spreadsheetData.sheets.push(sheetData);
  });

  // Convert the JSON object to a formatted string
  const jsonContent = JSON.stringify(spreadsheetData, null, 2);

  // Create the downloadable JSON file as a blob
  const blob = Utilities.newBlob(jsonContent, MimeType.JSON, `${ss.getName()}_data.json`);

  // Create a download link via HTML output
  const base64Data = Utilities.base64Encode(blob.getBytes());
  const htmlOutput = HtmlService.createHtmlOutput(
    `<html>
      <body>
        <a href="data:application/json;base64,${base64Data}" download="${ss.getName()}_data.json">
          Click here to download the JSON file
        </a>
      </body>
    </html>`
  );
  SpreadsheetApp.getUi().showModalDialog(htmlOutput, 'Download JSON');
}
